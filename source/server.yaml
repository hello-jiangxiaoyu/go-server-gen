package:
  Resp:
    value: response
    import: pkg/response


global:
  - path: "pkg/response/error_request.go"
    write: overwrite
    body: |-
      package response

      import (
        {{.Pkg.Context.Import}}
        {{.Pkg.Code.Import}}
      )

      // ErrorRequest 请求参数错误
      func ErrorRequest(c {{.Pkg.Context.Value}}, err error) {{.Pkg.ReturnType.Value}} {
        {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusBadRequest, CodeRequestPara, err, "invalidate para")
      }

      // ErrorRequestWithMsg 请求参数错误
      func ErrorRequestWithMsg(c {{.Pkg.Context.Value}}, err error, msg string) {{.Pkg.ReturnType.Value}} {
        {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusBadRequest, CodeRequestPara, err, msg)
      }

      // ErrorForbidden 无权访问
      func ErrorForbidden(c {{.Pkg.Context.Value}}, msg string) {{.Pkg.ReturnType.Value}} {
        {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusForbidden, CodeForbidden, nil, msg)
      }

      // ErrorInvalidateToken token 无效
      func ErrorInvalidateToken(c {{.Pkg.Context.Value}}, err error) {{.Pkg.ReturnType.Value}} {
        {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusForbidden, CodeInvalidToken, err, "invalidate token")
      }

      // ErrorNoLogin 用户未登录
      func ErrorNoLogin(c {{.Pkg.Context.Value}}) {{.Pkg.ReturnType.Value}} {
        {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusUnauthorized, CodeNotLogin, nil, "user not login")
      }


  - path: "pkg/response/error_sql.go"
    write: overwrite
    body: |-
      package response

      import (
        "strings"
        "gorm.io/gorm"
        {{.Pkg.Context.Import}}
        {{.Pkg.Code.Import}}
      )

      // ErrorSqlUpdate SQL更新失败
      func ErrorUpdate(c {{.Pkg.Context.Value}}, err error, respMsg string) {{.Pkg.ReturnType.Value}} {
        if err != nil && strings.Contains(err.Error(), "ERROR: duplicate key value violates unique constraint") {
          {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusConflict, CodeSqlModifyDuplicate, err, respMsg)
        } else {
          {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusInternalServerError, CodeSqlModify, err, respMsg)
        }
      }

      // ErrorSqlCreate SQL创建失败
      func ErrorCreate(c {{.Pkg.Context.Value}}, err error, respMsg string) {{.Pkg.ReturnType.Value}} {
        if err != nil && strings.Contains(err.Error(), "ERROR: duplicate key value violates unique constraint") {
          {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusConflict, CodeSqlCreateDuplicate, err, respMsg)
        } else {
          {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusInternalServerError, CodeSqlCreate, err, respMsg)
        }
      }

      // ErrorSelect 数据库查询错误
      func ErrorSelect(c {{.Pkg.Context.Value}}, err error, respMsg string) {{.Pkg.ReturnType.Value}} {
        if err != nil && strings.Contains(err.Error(), gorm.ErrRecordNotFound.Error()) { // gorm First操作record not found
          {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusNotFound, CodeSqlSelectNotFound, err, respMsg)
        } else {
          {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusInternalServerError, CodeSqlSelect, err, respMsg)
        }
      }

      // ErrorSqlDelete SQL删除失败
      func ErrorDelete(c {{.Pkg.Context.Value}}, err error, respMsg string) {{.Pkg.ReturnType.Value}} {
        if err != nil && strings.Contains(err.Error(), gorm.ErrForeignKeyViolated.Error()) { // 外键依赖导致无法删除
          {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusConflict, CodeSqlDeleteForKey, err, respMsg)
        } else {
          {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusInternalServerError, CodeSqlDelete, err, respMsg)
        }
      }


  - path: "pkg/response/error_unknow.go"
    write: overwrite
    body: |-
      package response

      import (
        {{.Pkg.Context.Import}}
        {{.Pkg.Code.Import}}
      )

      // ErrorUnknown 未知错误
      func ErrorUnknown(c {{.Pkg.Context.Value}}, err error, respMsg string) {{.Pkg.ReturnType.Value}} {
        {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusInternalServerError, CodeUnknown, err, respMsg)
      }

      // ErrorNotFound 资源未找到
      func ErrorNotFound(c {{.Pkg.Context.Value}}, err error, respMsg string) {{.Pkg.ReturnType.Value}} {
        {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusInternalServerError, CodeNotFound, err, respMsg)
      }

      func ErrorSaveSession(c {{.Pkg.Context.Value}}, err error) {{.Pkg.ReturnType.Value}} {
        {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusInternalServerError, CodeSaveSession, err, "failed to save session")
      }

      // ErrorSendRequest 发送 fast http 请求失败
      func ErrorSendRequest(c {{.Pkg.Context.Value}}, err error, respMsg string) {{.Pkg.ReturnType.Value}} {
        {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusInternalServerError, CodeSendRequest, err, respMsg)
      }


  - path: "pkg/response/middleware.go"
    write: overwrite
    body: |-
      package response

      import (
        {{.Pkg.Context.Import}}
        {{.Pkg.Code.Import}}
      )

      func ErrorPanic(c {{.Pkg.Context.Value}}) {{.Pkg.ReturnType.Value}} {
        {{.Pkg.Return.Value}} errorResponse(ctx, {{.Pkg.Code.Value}}.StatusInternalServerError, CodeServerPanic, nil, "server panic", nil)
      }

      func ErrorHost(c {{.Pkg.Context.Value}}) {{.Pkg.ReturnType.Value}} {
        {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusForbidden, CodeNoSuchHost, nil, "no such host", nil)
      }

      // ErrorNoSuchRoute 404
      func ErrorNoSuchRoute(c {{.Pkg.Context.Value}}, err error) {{.Pkg.ReturnType.Value}} {
        {{.Pkg.Return.Value}} errorResponse(c, {{.Pkg.Code.Value}}.StatusNotFound, CodeNoSuchRoute, err, "no such route")
      }


  - path: "pkg/response/success.go"
    write: overwrite
    body: |-
      package response

      import (
        {{.Pkg.Context.Import}}
        {{.Pkg.Code.Import}}
      )

      func success(c {{.Pkg.Context.Value}}, data any, total int) {{.Pkg.ReturnType.Value}} {
        {{.Pkg.Return.Value}} response(c, {{.Pkg.Code.Value}}.StatusOK, CodeSuccess, nil, MsgSuccess, data, total)
      }

      func Success(c {{.Pkg.Context.Value}}) error {
        {{.Pkg.Return.Value}} response(c, {{.Pkg.Code.Value}}.StatusOK, CodeSuccess, nil, MsgSuccess, struct{}{}, 0)
      }
      func SuccessWithData(c {{.Pkg.Context.Value}}, data any) {{.Pkg.ReturnType.Value}} {
        {{.Pkg.Return.Value}} response(c, {{.Pkg.Code.Value}}.StatusOK, CodeSuccess, nil, MsgSuccess, data, 0)
      }
      func SuccessWithArrayData(c {{.Pkg.Context.Value}}, data any, total int) {{.Pkg.ReturnType.Value}} {
        {{.Pkg.Return.Value}} response(c, {{.Pkg.Code.Value}}.StatusOK, CodeSuccess, nil, MsgSuccess, data, total)
      }


  - path: "pkg/response/service_code.go"
    write: overwrite
    body: |-
      package response

      const (
        MsgSuccess = ""
      )

      const (
        CodeSuccess = 200
        CodeAccept  = 202
      )

      // 系统相关错误码
      const (
        CodeNoSuchRoute = 1000 // 路由不存在
        CodeRequestPara = 1001 // 请求参数错误
        CodeForbidden   = 1002 // 无权访问
      )

      // 业务相关错误码
      const (
        CodeNoSuchHost   = 2000 // 非法host
        CodeNotLogin     = 2001 // 用户未登录
        CodeInvalidToken = 2002 // 非法token
      )

      // SQL相关错误码
      const (
        CodeSqlSelect          = iota + 3000 // 查询失败
        CodeSqlSelectNotFound                // 不存在该数据
        CodeSqlModify                        // 修改失败
        CodeSqlModifyDuplicate               // 数据冲突导致修改失败
        CodeSqlCreate                        // 创建失败
        CodeSqlCreateDuplicate               // 数据重复导致创建失败
        CodeSqlDelete                        // 删除失败
        CodeSqlDeleteForKey                  // 外键依赖导致删除失败
      )

      // error相关错误码
      const (
        CodeServerPanic = iota + 5000 // 发生panic
        CodeUnknown                   // 未知错误
        CodeNotFound                  // 未找到
        CodeSaveSession               // session保存错误
        CodeSendRequest               // 发送http请求错误
      )


  - path: "pkg/middleware/recover.go"
    write: overwrite
    body: |-
      package middleware

      import (
        "context"
        "errors"
        "fmt"
        "net"
        "os"
        "runtime"
        "strings"
        {{.Pkg.Context.Import}}
        "{{.ProjectName}}/{{.Pkg.Resp.Import}}"
      )

      func stackInfo(msg string, err any, skip int) string {
        for i := skip; ; i++ {
          pc, file, line, ok := runtime.Caller(i)
          if !ok {
            break
          }

          // 不打印第三方库栈信息
          if !strings.Contains(file, "github.com/") && !strings.Contains(file, "gorm.io/") && !strings.Contains(file, "net/http") {
            msg += fmt.Sprintf("\n\t%s:%d %s", file, line, runtime.FuncForPC(pc).Name())
          }
        }
        return msg + "\n\n"
      }

      // RecoveryHandler panic处理
      func Recover({{- if eq .Pkg.Context.Value "echo.Context" -}}next {{.Pkg.ReturnType.Value}}{{- end }}) {{.Pkg.HandleFunc.Value}} {
        return func(
        {{- if eq .Pkg.Context.Value "*app.RequestContext" -}}
        ctx context.Context, c {{.Pkg.Context.Value}}
        {{- else -}}
        c {{.Pkg.Context.Value}}
        {{- end -}}
        ) {{.Pkg.ReturnType.Value}} {
          defer func() {
            if err := recover(); err != nil {
              // Check for a broken connection, as it is not really a
              var brokenPipe bool
              if ne, ok := err.(*net.OpError); ok {
                var se *os.SyscallError
                if errors.As(ne, &se) {
                  seStr := strings.ToLower(se.Error())
                  if strings.Contains(seStr, "broken pipe") || strings.Contains(seStr, "connection reset by peer") {
                    brokenPipe = true
                  }
                }
              }
              req := fmt.Sprintf("panic recovered: %s; method:%s path:%s", err, c.Method(), c.Path())
              println(stackInfo(req, err, 3))
              if !brokenPipe {
                {{.Pkg.Resp.Value}}.ErrorPanic(c)
              }
            }
          }()
          {{ if eq .Pkg.Context.Value "*app.RequestContext" -}}
          c.Next(ctx)
          {{- else if eq .Pkg.Context.Value "echo.Context" -}}
          return next(c)
          {{- else -}}
          {{.Pkg.Return.Value}} c.Next()
          {{- end }}
        }
      }
      


  - path: "pkg/response/response.go"
    write: overwrite
    body: "{{.Pkg.ResponseCode.Value}}"
    first-line: package response

  - path: "biz/controller/internal/bind.go"
    write: overwrite
    body: "{{.Pkg.BindCode.Value}}"
    first-line: package internal

