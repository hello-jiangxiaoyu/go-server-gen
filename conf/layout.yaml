pkg:
  Controller: biz/controller
  Service: biz/service
  Req:  biz/model
  Resp: pkg/response
  Bind: biz/controller/internal
  Biz:  biz

global:
  - name: register
    path: "{{.Pkg.Biz}}/register.go"
    write: pointer
    handler-key: "New{{uppercaseFirst .ServiceName}}Router"
    handler: "\tNew{{uppercaseFirst .ServiceName}}Router(e)"
    body: |-
      // Code generated by go-server-gen. DO NOT EDIT.
      
      package {{.Pkg.Biz}}
      import (
          "{{.Pkg.EngineImport}}"
      )
      func Register(e {{.Pkg.EngineType}}) {
          //INSERT_POINT: DO NOT DELETE THIS LINE!
          {{- range $_, $Code := .Handlers }}
          {{$Code}}
          {{- end }}
      }

  - name: router
    path: "{{.Pkg.Biz}}/router.go"
    write: append
    body: |-
      package {{.Pkg.Biz}}
      import (
          "{{.Pkg.EngineImport}}"
          "{{.ProjectName}}/{{.Pkg.Controller}}"
          {{- if .HasMiddleware }}
          "{{.ProjectName}}/biz/middleware"
          {{- end}}
      )
      {{- range $_, $Code := .Handlers }}
      {{$Code}}
      {{- end }}
    handler-key: "New{{uppercaseFirst .ServiceName}}Router"
    handler: |
      func New{{uppercaseFirst .ServiceName}}Router(e {{.Pkg.EngineType}}) {
          {{.ServiceName | lowercaseFirst}} := e.Group(""
      {{- range $_, $md := .Middlewares -}}
      , {{$md}}
      {{- end -}}
      )
          {
              {{- range $_, $Api := .Apis}}
              {{$Api.ServiceName | lowercaseFirst}}.{{method $Api.Method $Api.Pkg.ContextType}}("{{$Api.Path}}"
              {{- range $_, $Handler := $Api.Handlers -}}
              {{- if hasPrefix $Handler "middleware" -}}
              , {{$Handler}}()
              {{- else -}}
              , {{getGoLastSplit $.Pkg.Controller "/"}}.{{$Handler}}
              {{- end -}}
              {{- end}})
              {{- end}}
          }
      }


service:
  - name: controller
    path: "{{.Pkg.Controller}}/{{convertToWord .ServiceName `_`}}.go"
    write: append
    handler-key: "{{.FuncName}}"
    handler: |-
      // {{.FuncName}}
      // @Tags	{{convertToWord .ServiceName "-"}}
      // @Summary	{{.Summary}}
      {{- range $_, $Para := .ReqParam}}
      // @Param	{{$Para.Name}}	{{$Para.From}}	{{$Para.Type}}	{{$Para.Required}}	"{{$Para.Description}}"
      {{- end }}
      // @Success	200
      // @Router	{{.Path | getDocRouter}} [{{.Method}}]
      func {{.FuncName}}(
        {{- if eq .Pkg.ContextType "*app.RequestContext" -}}
        _ context.Context, c {{.Pkg.ContextType}}
        {{- else -}}
        c {{.Pkg.ContextType}}
        {{- end -}}) {{.Pkg.ReturnType}} {
          var req {{getGoLastSplit .Pkg.Req "/"}}.{{.ReqName}}
          if err := {{getGoLastSplit .Pkg.Bind "/"}}.New(c).BindJson(&req).Error; err != nil {
            {{- if eq .Pkg.Return "" -}}
            response.ErrorRequest(c, err)
            return
            {{- else -}}
            return response.ErrorRequest(c, err)
            {{- end}}
          }
          {{.Pkg.Return}} service.{{.FuncName}}(c, &req)
      }
    body: |-
      package controller
      import (
          "{{.Pkg.ContextImport}}"
          "{{.ProjectName}}/{{.Pkg.Req}}"
          "{{.ProjectName}}/{{.Pkg.Resp}}"
          "{{.ProjectName}}/{{.Pkg.Bind}}"
          "{{.ProjectName}}/{{.Pkg.Service}}"
          {{ if eq .Pkg.Context "*app.RequestContext" -}}
          "context"
          {{- end}}
      )
      {{- range $_, $Code := .Handlers }}
      {{$Code}}
      {{- end }}

  - name: service
    path: "{{.Pkg.Service}}/{{convertToWord .ServiceName `_`}}.go"
    write: append
    handler-key: "{{.FuncName}}("
    handler: |-
      func {{.FuncName}}(c {{.Pkg.ContextType}}, req *{{getGoLastSplit .Pkg.Req "/"}}.{{.ReqName}}) {{.Pkg.ReturnType}} {
        // you service code hear
        {{ if ne .Pkg.Return "" }}
        return nil
        {{- end}}
      }
    body: |-
      package service
      import (
          "{{.Pkg.ContextImport}}"
          "{{.ProjectName}}/{{.Pkg.Req}}"
      )
      {{- range $_, $Code := .Handlers }}
      {{$Code}}
      {{ end }}


messages:
  - name: model
    path: "{{.Pkg.Req}}/{{.IdlName}}.go"
    write: append
    body: |-
      package {{getGoLastSplit $.Pkg.Req "/"}}
      {{- range $_, $Code := .Handlers }}
      {{$Code}}
      {{ end }}
    handler: |-
      {{.Source}}

