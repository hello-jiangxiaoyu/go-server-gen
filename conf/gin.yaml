pkg:
  Controller: internal/controller
  Service: internal/service
  Req:  internal/sections/request
  Resp: internal/sections/response
  RespName: response
  Bind: internal/controller/internal
  Model: internal/sections/models
  Biz:  internal

global:
  - name: register
    path: "{{.Pkg.Biz}}/register.go"
    write: pointer
    handler-key: "New{{uppercaseFirst .ServiceName}}Router"
    handler: "\tNew{{uppercaseFirst .ServiceName}}Router(e)"
    body: |-
      // Code generated by go-server-gen. DO NOT EDIT.
      
      package {{.Pkg.Biz}}
      import (
          "{{.Pkg.EngineImport}}"
      )
      func Register(e {{.Pkg.EngineType}}) {
          //INSERT_POINT: DO NOT DELETE THIS LINE!
          {{- range $_, $Code := .Handlers }}
          {{$Code}}
          {{- end }}
      }

  - name: router
    path: "{{.Pkg.Biz}}/router.go"
    write: append
    body: |-
      package {{.Pkg.Biz}}
      import (
          "{{.Pkg.EngineImport}}"
          "{{.ProjectName}}/{{.Pkg.Controller}}"
      )
      {{- range $_, $Code := .Handlers }}
      {{$Code}}
      {{- end }}
    handler-key: "New{{uppercaseFirst .ServiceName}}Router"
    handler: |
      func New{{uppercaseFirst .ServiceName}}Router(e {{.Pkg.EngineType}}) {
          {{.ServiceName | lowercaseFirst}} := e.Group("")
          {
              {{- range $_, $Api := .Apis}}
              {{$Api.ServiceName | lowercaseFirst}}.{{getGoMethod $Api.Method $Api.Pkg.ContextType}}("{{$Api.Path}}", {{getGoLastSplit $.Pkg.Controller "/"}}.{{$Api.Handler}})
              {{- end}}
          }
      }

  - name: request
    path: "{{.Pkg.Req}}/{{.IdlName}}.go"
    write: append
    body: |-
      package {{getGoLastSplit $.Pkg.Req "/"}}
      
      import (
        "{{.ProjectName}}/{{.Pkg.Model}}"
      )
      {{- range $_, $Code := .Handlers }}
      {{$Code}}
      {{ end }}
    handler-key: "{{uppercaseFirst .ServiceName}}"
    handler: |-
      {{- range $_, $Msg := .MsgMap }}
      {{ if eq $Msg.Lang "go" -}}
      {{$Msg.Source}}
      {{- end}}
      {{ end }}


service:
  - name: controller
    path: "{{.Pkg.Controller}}/{{convertToWord .ServiceName `_`}}.go"
    write: append
    handler-key: "{{.FuncName}}"
    handler: |-
      // {{.FuncName}}
      // @Tags	{{convertToWord .ServiceName "-"}}
      // @Summary	{{.Summary}}
      {{- range $_, $Para := .ReqParam}}
      // @Param	{{$Para.Name}}	{{$Para.From}}	{{$Para.Type}}	{{$Para.Required}}	"{{$Para.Description}}"
      {{- end }}
      // @Success	200
      // @Router	{{.Path | getDocRouter}} [{{.Method}}]
      func {{.FuncName}}(c {{.Pkg.ContextType}}) {
          var req {{getGoLastSplit .Pkg.Req "/"}}.{{.ReqName}}
          {{ if hasSuffix .FuncName "List" -}}
          if err := {{getGoLastSplit .Pkg.Bind "/"}}.BindQuery(c, &req).BindUser(&req.Operator).Error; err != nil {
            return
          }
      
          var total int64
          var {{.ServiceName}}s []models.{{uppercaseFirst .ServiceName}}
          if err := orm.DB().Count(&total).Error; err != nil {
            {{.Pkg.RespName}}.ErrorSelect(c, err, "get {{.ServiceName}}s total err")
            return
          }
          if err := orm.DB().Scopes(orm.Page(req.PageNumber, req.PageSize)).Find(&{{.ServiceName}}s).Error; err != nil {
            {{.Pkg.RespName}}.ErrorSelect(c, err, "get {{.ServiceName}}s err")
            return
          }
          {{.Pkg.RespName}}.SuccessWithArrayData(c, {{.ServiceName}}s, total)
          {{ else if hasPrefix .FuncName "Get" -}}
          if err := {{getGoLastSplit .Pkg.Bind "/"}}.BindUri(c, &req).BindUser(&req.Operator).Error; err != nil {
            return
          }
          var {{.ServiceName}} models.{{uppercaseFirst .ServiceName}}
          if err := orm.DB().Where("id = ?", req.{{uppercaseFirst .ServiceName}}ID).First(&{{.ServiceName}}).Error; err != nil {
            {{.Pkg.RespName}}.ErrorSelect(c, err, "get {{.ServiceName}} err")
            return
          }
          {{.Pkg.RespName}}.SuccessWithData(c, {{.ServiceName}})
          {{ else if hasPrefix .FuncName "Delete" -}}
          if err := {{getGoLastSplit .Pkg.Bind "/"}}.BindUri(c, &req).BindUser(&req.Operator).Error; err != nil {
            return
          }
          if err := orm.DB().Where("id = ?", req.{{uppercaseFirst .ServiceName}}ID).Delete(&models.{{uppercaseFirst .ServiceName}}{}).Error; err != nil {
            {{.Pkg.RespName}}.ErrorDelete(c, err, "failed to delete {{.ServiceName}}")
            return
          }
          {{.Pkg.RespName}}.Success(c)
          {{ else if hasPrefix .FuncName "BatchDelete" -}}
          if err := {{getGoLastSplit .Pkg.Bind "/"}}.BindJson(c, &req).BindUser(&req.Operator).Error; err != nil {
            return
          }
          if err := orm.DB().Where("id IN ?", req.{{uppercaseFirst .ServiceName}}IDs).Delete(&models.{{uppercaseFirst .ServiceName}}{}).Error; err != nil {
            {{.Pkg.RespName}}.ErrorDelete(c, err, "failed to delete {{.ServiceName}}")
            return
          }
          {{.Pkg.RespName}}.Success(c)
          {{ else if hasPrefix .FuncName "Create" -}}
          if err := {{getGoLastSplit .Pkg.Bind "/"}}.BindUriAndJson(c, &req).BindUser(&req.Operator).Error; err != nil {
            return
          }
          {{.ServiceName}} := models.{{uppercaseFirst .ServiceName}}{
            UpdatedBy: req.Operator.ID,
          }
          if err := orm.DB().Create(&{{.ServiceName}}).Error; err != nil {
            {{.Pkg.RespName}}.ErrorCreate(c, err, "failed to create {{.ServiceName}}")
            return
          }
          {{.Pkg.RespName}}.Success(c)
          {{ else if hasPrefix .FuncName "Update" -}}
          if err := {{getGoLastSplit .Pkg.Bind "/"}}.BindUriAndJson(c, &req).BindUser(&req.Operator).Error; err != nil {
            return
          }
      
          {{.ServiceName}} := models.{{uppercaseFirst .ServiceName}}{
            UpdatedBy: req.Operator.ID,
          }
          if err := orm.DB().Where("id = ?", req.{{uppercaseFirst .ServiceName}}ID).Save(&{{.ServiceName}}).Error; err != nil {
            {{.Pkg.RespName}}.ErrorCreate(c, err, "failed to create {{.ServiceName}}")
            return
          }
          {{.Pkg.RespName}}.Success(c)
          {{ else -}}
          if err := {{getGoLastSplit .Pkg.Bind "/"}}.BindUriAndJson(c, &req).BindUser(&req.Operator).Error; err != nil {
            return
          }
          {{ end -}}
      }
    body: |-
      package controller
      import (
          "{{.Pkg.ContextImport}}"
          "{{.ProjectName}}/{{.Pkg.Req}}"
          "{{.ProjectName}}/{{.Pkg.Resp}}"
          "{{.ProjectName}}/{{.Pkg.Bind}}"
          "{{.ProjectName}}/{{.Pkg.Biz}}/pkg/orm"
          "{{.ProjectName}}/{{.Pkg.Model}}"
      )
      {{- range $_, $Code := .Handlers }}
      {{$Code}}
      {{- end }}

  - name: client
    path: "web/src/api/{{convertToWord .ServiceName `-`}}.ts"
    write: append
    handler-key: "{{.FuncName}}"
    handler: |-
      {{ if hasSuffix .FuncName "List" -}}
      export async function {{lowercaseFirst .FuncName}}({{ mapJoin (getPathPara .Path) ": " ", " false }}): Promise<Root<{{uppercaseFirst .ServiceName}}>> {
        return await {{.Method}}<{{snakeToUpperCamelCase .ServiceName}}>(`{{.Path | getTsRouter}}`);
      }
      {{ else if hasPrefix .FuncName "Get" -}}
      export async function {{lowercaseFirst .FuncName}}({{ mapJoin (getPathPara .Path) ": " ", " false }}): Promise<Root<{{snakeToUpperCamelCase .ServiceName}}[]>> {
        return await {{.Method}}<{{snakeToUpperCamelCase .ServiceName}}[]>(`{{.Path | getTsRouter}}`);
      }
      {{ else if hasPrefix .FuncName "Update" -}}
      export async function {{lowercaseFirst .FuncName}}({{ mapJoin (getPathPara .Path) ": " ", " true }}data: object): Promise<Root<object>> {
        return await {{.Method}}(`{{.Path | getTsRouter}}`, data);
      }
      {{ else if hasPrefix .FuncName "Create" -}}
      export async function {{lowercaseFirst .FuncName}}({{ mapJoin (getPathPara .Path) ": " ", " true }}data: object): Promise<Root<{{snakeToUpperCamelCase .ServiceName}}>> {
        return await POST<{{snakeToUpperCamelCase .ServiceName}}>(`{{.Path | getTsRouter}}`, data);
      }
      {{ else if hasPrefix .FuncName "BatchDelete" -}}
      export async function {{lowercaseFirst .FuncName}}({{ mapJoin (getPathPara .Path) ": " ", " true }}data: object): Promise<Root<object>> {
        return await {{.Method}}(`{{.Path | getTsRouter}}`, data);
      }
      {{ else if hasPrefix .FuncName "Delete" -}}
      export async function {{lowercaseFirst .FuncName}}({{ mapJoin (getPathPara .Path) ": " ", " false }}): Promise<Root<object>> {
        return await {{.Method}}(`{{.Path | getTsRouter}}`);
      }
      {{ else -}}
      {{ end }}
    body: |-
      import {type Root, GET, POST, PUT, DELETE} from "./common"
      
      {{ range $Key, $Msg := .MsgMap }}
      {{- if eq $Key "__tsInterface" -}}
      {{$Msg.Source}}
      {{- end}}
      {{- end }}
      {{ range $_, $Code := .Handlers }}
      {{$Code}}
      {{- end }}
